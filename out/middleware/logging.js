"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PROD = process.env["ENVIRONMENT"] === "PROD";
class LoggingMiddleware {
    constructor() {
        console.log(LoggingMiddleware.name, `PROD: ${PROD}`);
    }
    logRequestResponse(req, res, next) {
        let startTime = new Date();
        console.log(`${startTime.toISOString()} >>> ${req.method} ${req.url}`);
        res.on("finish", () => {
            let endTime = new Date();
            let duration = endTime.getTime() - startTime.getTime();
            console.log(`${endTime.toISOString()} <<< ${req.method} ${req.url}: ${res.statusCode} [${duration}msec]`);
        });
        next();
    }
    logErrors(err, req, res, next) {
        let errorCode = err.statusCode && err.statusCode || 500;
        console.error(`${new Date().toISOString()} ERR ${req.method} ${req.url}: ${errorCode}`, err.stack && err.stack || err);
        let body = PROD
            ? err && err.statusCode && err.message || "Oops... something went wrong..."
            : err && (err.stack || (err.toString && err.toString()) || String(err));
        res.status(errorCode).send(body);
    }
}
exports.default = new LoggingMiddleware();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL2xvZ2dpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLE1BQU0sQ0FBQztBQUVuRDtJQUNJO1FBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFTSxrQkFBa0IsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO1FBQ3JFLElBQUksU0FBUyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxXQUFXLEVBQUUsUUFBUSxHQUFHLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRXZFLEdBQUcsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtZQUNsQixJQUFJLE9BQU8sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQ3pCLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDdkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsUUFBUSxHQUFHLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLFVBQVUsS0FBSyxRQUFRLE9BQU8sQ0FBQyxDQUFDO1FBQzlHLENBQUMsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxFQUFFLENBQUM7SUFDWCxDQUFDO0lBRU0sU0FBUyxDQUFDLEdBQVEsRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO1FBQ3RFLElBQUksU0FBUyxHQUFHLEdBQUcsQ0FBQyxVQUFVLElBQUksR0FBRyxDQUFDLFVBQVUsSUFBSSxHQUFHLENBQUM7UUFDeEQsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLFFBQVEsR0FBRyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsR0FBRyxLQUFLLFNBQVMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUMsQ0FBQztRQUV2SCxJQUFJLElBQUksR0FBRyxJQUFJO1lBQ1gsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxJQUFJLEdBQUcsQ0FBQyxPQUFPLElBQUksaUNBQWlDO1lBQzNFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtRQUMzRSxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0NBQ0o7QUFFRCxrQkFBZSxJQUFJLGlCQUFpQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1JlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb259IGZyb20gXCJleHByZXNzXCI7XHJcbmNvbnN0IFBST0QgPSBwcm9jZXNzLmVudltcIkVOVklST05NRU5UXCJdID09PSBcIlBST0RcIjtcclxuXHJcbmNsYXNzIExvZ2dpbmdNaWRkbGV3YXJlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKExvZ2dpbmdNaWRkbGV3YXJlLm5hbWUsIGBQUk9EOiAke1BST0R9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxvZ1JlcXVlc3RSZXNwb25zZShyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgOiB2b2lkIHtcclxuICAgICAgICBsZXQgc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhgJHtzdGFydFRpbWUudG9JU09TdHJpbmcoKX0gPj4+ICR7cmVxLm1ldGhvZH0gJHtyZXEudXJsfWApO1xyXG5cclxuICAgICAgICByZXMub24oXCJmaW5pc2hcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgZW5kVGltZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgIGxldCBkdXJhdGlvbiA9IGVuZFRpbWUuZ2V0VGltZSgpIC0gc3RhcnRUaW1lLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYCR7ZW5kVGltZS50b0lTT1N0cmluZygpfSA8PDwgJHtyZXEubWV0aG9kfSAke3JlcS51cmx9OiAke3Jlcy5zdGF0dXNDb2RlfSBbJHtkdXJhdGlvbn1tc2VjXWApO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgbmV4dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBsb2dFcnJvcnMoZXJyOiBhbnksIHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA6dm9pZCB7XHJcbiAgICAgICAgbGV0IGVycm9yQ29kZSA9IGVyci5zdGF0dXNDb2RlICYmIGVyci5zdGF0dXNDb2RlIHx8IDUwMDtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGAke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX0gRVJSICR7cmVxLm1ldGhvZH0gJHtyZXEudXJsfTogJHtlcnJvckNvZGV9YCwgZXJyLnN0YWNrICYmIGVyci5zdGFjayB8fCBlcnIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBib2R5ID0gUFJPRFxyXG4gICAgICAgICAgICA/IGVyciAmJiBlcnIuc3RhdHVzQ29kZSAmJiBlcnIubWVzc2FnZSB8fCBcIk9vcHMuLi4gc29tZXRoaW5nIHdlbnQgd3JvbmcuLi5cIlxyXG4gICAgICAgICAgICA6IGVyciAmJiAoZXJyLnN0YWNrIHx8IChlcnIudG9TdHJpbmcgJiYgZXJyLnRvU3RyaW5nKCkpIHx8IFN0cmluZyhlcnIpKVxyXG4gICAgICAgIHJlcy5zdGF0dXMoZXJyb3JDb2RlKS5zZW5kKGJvZHkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgTG9nZ2luZ01pZGRsZXdhcmUoKTtcclxuIl19
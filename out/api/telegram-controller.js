"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_telegram_bot_api_1 = __importDefault(require("node-telegram-bot-api"));
const TOKEN = "579172390:AAF_R_w38DbUZ4fX0uRbz1WTHd0bJRTtn4g";
const AUTHORIZED_USERS = {
    "doronguttman": true
};
class TelegramController {
    constructor(express) {
        this._bot = new node_telegram_bot_api_1.default(TOKEN, {
            polling: true,
        });
        this._bot.on("polling_error", (error) => this.handlePollingError(error));
        this._bot.on("message", (msg) => this.handleMessage(msg));
        express.get("/api/telegram", (req, res, next) => this.getBotStatus(req, res, next));
    }
    getBotStatus(req, res, next) {
        this._bot.getMe()
            .then(me => {
            res.status(200).json({
                me: me,
                isPolling: this._bot.isPolling
            });
        })
            .catch(err => next(err));
    }
    handlePollingError(err) {
        console.error(`${new Date().toISOString()} ERR ${TelegramController.name}.${this.handlePollingError.name}`, err);
    }
    handleMessage(msg) {
        console.log(`${new Date().toISOString()} ${TelegramController.name}.${this.handleMessage.name}`, msg);
        try {
            this.isAuthorized(msg);
            this._bot.sendMessage(msg.chat.id, "hello");
        }
        catch (e) {
            console.error(`${new Date().toISOString()} ${TelegramController.name}.${this.handleMessage.name}`, e.stack && e.stack || e);
        }
    }
    isAuthorized(msg) {
        let user = msg.from && msg.from.username;
        if (!user || !AUTHORIZED_USERS[user]) {
            throw new Error("Unauthorized user");
        }
        return true;
    }
}
exports.TelegramController = TelegramController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVsZWdyYW0tY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvdGVsZWdyYW0tY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLGtGQUFnRDtBQUVoRCxNQUFNLEtBQUssR0FBRywrQ0FBK0MsQ0FBQztBQUM5RCxNQUFNLGdCQUFnQixHQUFvQztJQUN0RCxjQUFjLEVBQUUsSUFBSTtDQUN2QixDQUFBO0FBRUQ7SUFHSSxZQUFZLE9BQWdCO1FBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSwrQkFBVyxDQUFDLEtBQUssRUFBRTtZQUMvQixPQUFPLEVBQUUsSUFBSTtTQUNoQixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQXdCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUUvRSxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN4RixDQUFDO0lBRU8sWUFBWSxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0I7UUFDaEUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7YUFDWixJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDUCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDakIsRUFBRSxFQUFFLEVBQUU7Z0JBQ04sU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUzthQUNqQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRU8sa0JBQWtCLENBQUMsR0FBVTtRQUNqQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsUUFBUSxrQkFBa0IsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3JILENBQUM7SUFFTyxhQUFhLENBQUMsR0FBd0I7UUFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLElBQUksa0JBQWtCLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdEcsSUFBSTtZQUNBLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDL0M7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNSLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFJLGtCQUFrQixDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztTQUMvSDtJQUNMLENBQUM7SUFFTyxZQUFZLENBQUMsR0FBd0I7UUFDekMsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN6QyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKO0FBN0NELGdEQTZDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cHJlc3MsIFJlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb24gfSBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgVGVsZWdyYW1Cb3QgZnJvbSBcIm5vZGUtdGVsZWdyYW0tYm90LWFwaVwiO1xyXG5cclxuY29uc3QgVE9LRU4gPSBcIjU3OTE3MjM5MDpBQUZfUl93MzhEYlVaNGZYMHVSYnoxV1RIZDBiSlJUdG40Z1wiO1xyXG5jb25zdCBBVVRIT1JJWkVEX1VTRVJTOiB7IFt1c2VybmFtZTogc3RyaW5nXTogYm9vbGVhbiB9ID0ge1xyXG4gICAgXCJkb3Jvbmd1dHRtYW5cIjogdHJ1ZVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGVsZWdyYW1Db250cm9sbGVyIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2JvdDogVGVsZWdyYW1Cb3Q7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZXhwcmVzczogRXhwcmVzcykge1xyXG4gICAgICAgIHRoaXMuX2JvdCA9IG5ldyBUZWxlZ3JhbUJvdChUT0tFTiwge1xyXG4gICAgICAgICAgICBwb2xsaW5nOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX2JvdC5vbihcInBvbGxpbmdfZXJyb3JcIiwgKGVycm9yKSA9PiB0aGlzLmhhbmRsZVBvbGxpbmdFcnJvcihlcnJvcikpO1xyXG4gICAgICAgIHRoaXMuX2JvdC5vbihcIm1lc3NhZ2VcIiwgKG1zZzogVGVsZWdyYW1Cb3QuTWVzc2FnZSkgPT4gdGhpcy5oYW5kbGVNZXNzYWdlKG1zZykpO1xyXG5cclxuICAgICAgICBleHByZXNzLmdldChcIi9hcGkvdGVsZWdyYW1cIiwgKHJlcSwgcmVzLCBuZXh0KSA9PiB0aGlzLmdldEJvdFN0YXR1cyhyZXEsIHJlcywgbmV4dCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0Qm90U3RhdHVzKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fYm90LmdldE1lKClcclxuICAgICAgICAgICAgLnRoZW4obWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xyXG4gICAgICAgICAgICAgICAgICAgIG1lOiBtZSxcclxuICAgICAgICAgICAgICAgICAgICBpc1BvbGxpbmc6IHRoaXMuX2JvdC5pc1BvbGxpbmdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IG5leHQoZXJyKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoYW5kbGVQb2xsaW5nRXJyb3IoZXJyOiBFcnJvcik6IHZvaWQge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYCR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfSBFUlIgJHtUZWxlZ3JhbUNvbnRyb2xsZXIubmFtZX0uJHt0aGlzLmhhbmRsZVBvbGxpbmdFcnJvci5uYW1lfWAsIGVycik7ICAvLyA9PiAnRUZBVEFMJ1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlTWVzc2FnZShtc2c6IFRlbGVncmFtQm90Lk1lc3NhZ2UpOiB2b2lkIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9ICR7VGVsZWdyYW1Db250cm9sbGVyLm5hbWV9LiR7dGhpcy5oYW5kbGVNZXNzYWdlLm5hbWV9YCwgbXNnKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLmlzQXV0aG9yaXplZChtc2cpO1xyXG4gICAgICAgICAgICB0aGlzLl9ib3Quc2VuZE1lc3NhZ2UobXNnLmNoYXQuaWQsIFwiaGVsbG9cIik7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGAke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX0gJHtUZWxlZ3JhbUNvbnRyb2xsZXIubmFtZX0uJHt0aGlzLmhhbmRsZU1lc3NhZ2UubmFtZX1gLCBlLnN0YWNrICYmIGUuc3RhY2sgfHwgZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNBdXRob3JpemVkKG1zZzogVGVsZWdyYW1Cb3QuTWVzc2FnZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCB1c2VyID0gbXNnLmZyb20gJiYgbXNnLmZyb20udXNlcm5hbWU7XHJcbiAgICAgICAgaWYgKCF1c2VyIHx8ICFBVVRIT1JJWkVEX1VTRVJTW3VzZXJdKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYXV0aG9yaXplZCB1c2VyXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG4iXX0=